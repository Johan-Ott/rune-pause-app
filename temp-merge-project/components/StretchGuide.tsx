import React, { useState, useEffect } from 'react';
import { motion } from 'motion/react';
import { Button } from './ui/button';
import { RotateCcw } from 'lucide-react';
import { useTimeBasedStyles } from './SeasonTheme';

interface StretchGuideProps {
  onComplete: () => void;
  darkMode?: boolean;
  stretchType?: 'desk' | 'full';
}

interface StretchStep {
  name: string;
  description: string;
  duration: number;
  instruction: string;
  tips?: string;
}

const stretchRoutines = {
  desk: {
    name: 'Skrivbordsstretching',
    description: 'Perfekt f√∂r l√•nga arbetsdagar',
    rune: '·õä·õè·ö±·õñ·ö≤', // Str√§ck
    exercises: [
      {
        name: 'Nackrotation',
        description: 'Mjuka rotationer f√∂r att l√∂sa sp√§nningar',
        duration: 30,
        instruction: 'Rotera huvudet l√•ngsamt i cirkel. F√∂rst √•t h√∂ger, sedan √•t v√§nster.',
        tips: 'H√•ll axlarna avslappnade'
      },
      {
        name: 'Axelrullningar',
        description: 'Lossa upp axlarna och √∂vre ryggen',
        duration: 20,
        instruction: 'Lyft axlarna mot √∂ronen, rulla bak√•t och l√•t dem falla.',
        tips: 'G√∂r stora, l√•ngsamma r√∂relser'
      },
      {
        name: 'Armstr√§ckning',
        description: 'Str√§ck armarna √∂ver huvudet',
        duration: 25,
        instruction: 'Str√§ck armarna rakt upp, l√•s fingrarna och str√§ck mot taket.',
        tips: 'Andas djupt och k√§nn str√§ckningen'
      },
      {
        name: 'Sidostr√§ckning',
        description: 'Str√§ck kroppen √•t sidorna',
        duration: 30,
        instruction: 'Lut√•t h√∂ger med h√∂ger arm √∂ver huvudet. Upprepa √•t v√§nster.',
        tips: 'H√•ll h√∂fterna rakt fram√•t'
      }
    ]
  },
  full: {
    name: 'Hel kroppsstretch',
    description: 'Omfattande stretchrutinning',
    rune: '·ö∫·õñ·õö', // Hel
    exercises: [
      {
        name: 'Kattstr√§ckning',
        description: 'Ryggstr√§ckning i st√•ende',
        duration: 30,
        instruction: 'B√∂j dig fram√•t, runda ryggen som en katt och str√§ck sedan bak√•t.',
        tips: 'R√∂r dig l√•ngsamt och kontrollerat'
      },
      {
        name: 'Vadstretch',
        description: 'Str√§ck bak p√• benen',
        duration: 40,
        instruction: 'St√• emot v√§gg, s√§tt ena foten bak√•t och tryck h√§len mot golvet.',
        tips: 'H√•ll benet rakt'
      },
      {
        name: 'H√∂ftflexorer',
        description: '√ñppna upp h√∂fterna',
        duration: 35,
        instruction: 'Ta ett stort steg bak√•t och s√§nk kroppen. K√§nn str√§ckningen i h√∂ften.',
        tips: 'H√•ll ryggen rak'
      },
      {
        name: 'Axel och br√∂st',
        description: '√ñppna br√∂stkorgen',
        duration: 30,
        instruction: 'F√∂r armarna bak√•t och k√§nn str√§ckningen √∂ver br√∂stet.',
        tips: 'H√•ll huvudet uppr√§tt'
      },
      {
        name: 'Total avslappning',
        description: 'Djup avslappning',
        duration: 45,
        instruction: 'St√• rak, andas djupt och k√§nn hur hela kroppen slappnar av.',
        tips: 'Fokusera p√• andningen'
      }
    ]
  }
};

export default function StretchGuide({ onComplete, darkMode = false, stretchType = 'desk' }: StretchGuideProps) {
  const [currentRoutine] = useState<keyof typeof stretchRoutines>(stretchType);
  const [currentStepIndex, setCurrentStepIndex] = useState(0);
  const [timeLeft, setTimeLeft] = useState(0);
  const [isActive, setIsActive] = useState(false);
  const { theme, glassStyles } = useTimeBasedStyles();

  const routine = stretchRoutines[currentRoutine];
  const currentStep = routine.exercises[currentStepIndex];
  const progress = ((currentStepIndex + 1) / routine.exercises.length) * 100;

  // Auto-starta n√§r komponenten laddas
  useEffect(() => {
    setTimeLeft(currentStep.duration);
    setIsActive(true);
  }, [currentStep.duration]);

  useEffect(() => {
    if (!isActive || timeLeft <= 0) return;

    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          if (currentStepIndex + 1 >= routine.exercises.length) {
            // Rutinen √§r klar
            setIsActive(false);
            setTimeout(onComplete, 1000);
            return 0;
          } else {
            // N√§sta steg
            setCurrentStepIndex(prev => prev + 1);
            return routine.exercises[currentStepIndex + 1].duration;
          }
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [isActive, timeLeft, currentStepIndex, routine.exercises, onComplete]);

  const resetRoutine = () => {
    setCurrentStepIndex(0);
    setTimeLeft(routine.exercises[0].duration);
    setIsActive(true);
  };

  return (
    <div className="flex flex-col min-h-screen p-4 sm:p-6 text-white relative z-10">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center mb-6 sm:mb-8"
      >
        <div className="text-4xl sm:text-5xl mb-4 opacity-90">
          {routine.rune}
        </div>
        <h1 className="text-2xl sm:text-3xl font-light mb-2">
          {routine.name}
        </h1>
        <p className="text-sm sm:text-base opacity-70 font-light">
          {routine.description}
        </p>
      </motion.div>

      {/* Progress bar */}
      <div className="mb-6 sm:mb-8">
        <div className="night-glass-ethereal rounded-full h-2 overflow-hidden">
          <motion.div
            className="h-full rounded-full"
            style={{
              background: `linear-gradient(to right, ${theme.colors.primary}, ${theme.colors.accent}, #a855f7)`,
              boxShadow: '0 0 10px rgba(147, 197, 253, 0.5)'
            }}
            initial={{ width: 0 }}
            animate={{ width: `${progress}%` }}
            transition={{ duration: 0.5 }}
          />
        </div>
        <div className="flex justify-between text-xs sm:text-sm opacity-60 mt-2">
          <span>Steg {currentStepIndex + 1} av {routine.exercises.length}</span>
          <span>{Math.round(progress)}%</span>
        </div>
      </div>



      {/* Current exercise */}
      <div className="flex-1 flex flex-col justify-center">
        <motion.div
          key={currentStepIndex}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          className="night-glass-cosmic rounded-2xl p-6 sm:p-8 mb-6 text-center night-shimmer"
        >
          {/* Timer - alltid synlig */}
          <div className="mb-6">
            <motion.div
              className="text-4xl sm:text-5xl font-light mb-2"
              animate={{ 
                scale: timeLeft <= 3 && timeLeft > 0 ? [1, 1.1, 1] : 1,
                color: timeLeft <= 3 && timeLeft > 0 ? ['#ffffff', '#ef4444', '#ffffff'] : '#ffffff'
              }}
              transition={{ duration: 0.5 }}
            >
              {timeLeft}s
            </motion.div>
            <div className="w-32 sm:w-40 h-2 bg-white/20 rounded-full mx-auto overflow-hidden">
              <motion.div
                className="h-full bg-gradient-to-r from-blue-400 to-green-400 rounded-full"
                animate={{ width: `${((currentStep.duration - timeLeft) / currentStep.duration) * 100}%` }}
                transition={{ duration: 0.5 }}
              />
            </div>
          </div>

          <h2 className="text-xl sm:text-2xl font-light mb-3 sm:mb-4">
            {currentStep.name}
          </h2>
          
          <p className="text-sm sm:text-base opacity-80 mb-4 sm:mb-6 leading-relaxed">
            {currentStep.instruction}
          </p>

          {currentStep.tips && (
            <div className="glass-subtle rounded-xl p-3 sm:p-4">
              <p className="text-xs sm:text-sm opacity-70 italic">
                üí° Tips: {currentStep.tips}
              </p>
            </div>
          )}
        </motion.div>

        {/* Endast √•terst√§ll-knapp */}
        <div className="flex justify-center">
          <Button
            onClick={resetRoutine}
            variant="outline"
            className="night-glass-ethereal night-hover text-white border-blue-300/30 px-6 sm:px-8 py-3 rounded-xl transition-all duration-300 night-shimmer"
          >
            <RotateCcw className="w-4 h-4 mr-2" />
            B√∂rja om
          </Button>
        </div>
      </div>


    </div>
  );
}